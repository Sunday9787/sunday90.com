import{_ as t,r as p,o as e,c as o,a as c,e as i,f as s,b as l}from"./app-CZ3SipWw.js";const u={};function r(d,n){const a=p("FlowChart");return e(),o("div",null,[n[0]||(n[0]=c("p",null,"它是一块自由的天地，艺术家可以在其中创造属于自己的世界...",-1)),i(" more "),n[1]||(n[1]=s(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>画布就是把控件原素放进去</p><h2 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h2><p>画布需要支持缩放，空格+鼠标左键拖拉移动，和随着滚轮位置缩放，以及添加删除控件</p><h2 id="设计" tabindex="-1"><a class="header-anchor" href="#设计" aria-hidden="true">#</a> 设计</h2><p>这里着重说下 缩放 和 拖动</p><h3 id="缩放" tabindex="-1"><a class="header-anchor" href="#缩放" aria-hidden="true">#</a> 缩放</h3><p>使用<code>transform</code>的<code>scale</code>实现，为了不产生精度问题数值范围采用 10 - 100，最后 / 100即可</p><h3 id="拖动" tabindex="-1"><a class="header-anchor" href="#拖动" aria-hidden="true">#</a> 拖动</h3><p>画布使用position定位，为什么不也采用transform呢？</p><blockquote><p>因为，使用 <code>transform: translate</code> 移动元素后，如果用户点击的是视觉上移动后的区域，事件可能无法触发，因为事件仍然绑定在原始位置</p></blockquote><p><strong>position 和 transform 使用场景</strong></p><table><thead><tr><th>场景</th><th>推荐使用</th><th>原因</th></tr></thead><tbody><tr><td>精确移动元素且需要交互事件</td><td><code>position</code></td><td>元素的实际边界会随之移动，点击或事件触发范围和视觉一致。</td></tr><tr><td>动画效果或临时位移，事件触发不重要</td><td><code>transform: translate</code></td><td>适合单纯的视觉效果，不影响事件触发。</td></tr><tr><td>动画效果中同时需要事件触发</td><td><code>transform</code> + 调整逻辑</td><td>如果事件范围有问题，可以额外调整父容器或通过 JavaScript 手动处理事件触发逻辑。</td></tr></tbody></table><h2 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h2><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
.template-stage(
 tabindex=&quot;-1&quot;
 :style=&quot;stageStyle&quot;
 @pointerdown=&quot;unSelectComponent&quot;
 @keydown.delete=&quot;deleteComponent&quot;
 @drop=&quot;dropHandle&quot;
 @dragover.prevent=&quot;noop&quot;)
 TemplateContextmenu(:scale=&quot;scale&quot;)
 TemplateArea(:scale=&quot;scale&quot; @area=&quot;area&quot;)
 TemplateMarkLine(v-for=&quot;item of markLine&quot;
   :key=&quot;item.type&quot;
   :position=&quot;item.position&quot;
   :direction=&quot;item.direction&quot;
   :visible=&quot;item.visible&quot;)
 TemplateControl(v-for=&quot;component of store.componentsData&quot;
   v-model=&quot;component.visible&quot;
   :key=&quot;component.id&quot;
   :scale=&quot;scale&quot;
   :lock=&quot;component.props.lock&quot;
   :zIndex=&quot;component.props.zIndex&quot;
   :position.sync=&quot;component.props.position&quot;
   :size.sync=&quot;component.props.size&quot;
   @moveStart=&quot;moveStart(component)&quot;
   @move=&quot;move(component)&quot;
   @moveEnd=&quot;moveEnd(component)&quot;
   @resizeStart=&quot;resizeStart(component)&quot;
   @resize=&quot;resize(component)&quot;
   @resizeEnd=&quot;resizeEnd(component)&quot;
   @select=&quot;selectComponent(component)&quot;)
   component(
     top
     group
     ref=&quot;builtinGroupComponentRef&quot;
     :is=&quot;component.name&quot;
     :children=&quot;component.children&quot;
     v-bind=&quot;component.props&quot;
     v-if=&quot;component.name === &#39;builtin-group&#39;&quot;)
   component(
     ref=&quot;builtinComponentRef&quot;
     :is=&quot;component.name&quot;
     v-bind=&quot;component.props&quot;
     v-else)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tabindex=&quot;-1&quot;</code>这个属性很重要，不设置这个，原素无法触发键盘事件</p><p>原因</p><blockquote><p>普通非交互元素（如 <code>div</code>, <code>span</code>）在默认情况下是**不可聚焦（not focusable）**的。</p><p>只有交互式元素（如 <code>input</code>, <code>button</code>, <code>textarea</code>, <code>a</code> 等）默认可以通过键盘或鼠标获取焦点，才能接收键盘事件。</p></blockquote><p><code>tabindex</code> 的作用</p><blockquote><p>当为一个普通元素添加 <code>tabindex</code> 属性时，它会影响该元素的焦点行为：</p><ul><li><code>tabindex=&quot;0&quot;</code>: 元素变得可聚焦，并参与正常的 Tab 键导航顺序。</li><li><code>tabindex=&quot;-1&quot;</code>: 元素变得可聚焦，但不参与 Tab 键导航顺序。只能通过编程或鼠标点击等方式聚焦。即便不参与导航，元素一旦被聚焦，就能触发键盘事件。</li></ul></blockquote><p>聚焦与键盘事件的关系</p><blockquote><p>键盘事件（如 <code>keydown</code>, <code>keypress</code>, <code>keyup</code>）只有在元素<strong>拥有焦点</strong>时才会触发。因此：</p><ol><li>为普通元素添加 <code>tabindex=&quot;-1&quot;</code> 后，虽然它不能被 Tab 键选中，但仍然能通过脚本或鼠标点击使其聚焦。</li><li>一旦元素获得焦点，它就能正常响应键盘事件。</li></ol></blockquote><p>剩下的就是一些编辑器核心组件使用</p><blockquote><p><code>TemplateControl</code>将控件放进 <code>slot</code> 即可实现控件的拖拉移动和控制</p><p><code>TemplateContextmenu</code> 自定义右键菜单，调整控件层级关系和控制是否锁定</p><p><code>TemplateArea</code>框选组件，判定范围内那些控件应该组合，最后触发事件，最后监听组合，解组合</p><p><code>TemplateMarkLine</code>辅助线，通过 <code>useMarkLine</code> 来获取数据控制位置和是否显示线条</p></blockquote><p>所有功能都是以组件化思维设计开发，做到了，高内聚低耦合，易扩展维护</p><h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;TemplateStage&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">BuiltinInput</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/builtin/builtin-input.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">BuiltinGroup</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/builtin/builtin-group.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">BuiltinSelect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/builtin/builtin-select.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">TemplateControl</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/template-control.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">TemplateMarkLine</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/template-mark-line.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">TemplateArea</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/template-area.vue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">TemplateContextmenu</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;../components/template-contextmenu.vue&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">scale</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">spaceDown</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">scaleManual</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">provide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">stageInstance</span><span class="token operator">:</span> <span class="token keyword">this</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Name</th><th>Type</th><th>说明</th></tr></thead><tbody><tr><td><code>scale</code></td><td>Number</td><td>缩放数值（10-100）</td></tr><tr><td><code>position</code></td><td>{x: Number, y: Number}</td><td>画布位置</td></tr><tr><td><code>spaceDown</code></td><td>Boolean</td><td>空格键是否被按下（按下后，拖动鼠标即可拖动画布）</td></tr><tr><td><code>scaleManual</code></td><td>Boolean</td><td>是否手动调整缩放（<code>true</code>跟随鼠标位置缩放，<code>false</code>手动点击缩放按钮缩放）</td></tr></tbody></table><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p><strong>计算样式</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">stageStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">borderLeftWidth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>padding<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">borderTopWidth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>padding<span class="token punctuation">.</span>top <span class="token operator">+</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">borderRightWidth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>padding<span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">borderBottomWidth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>padding<span class="token punctuation">.</span>bottom <span class="token operator">+</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">transformOrigin</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scaleManual <span class="token operator">?</span> <span class="token string">&#39;center&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;left top&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">scale3d(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">/</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">/</span> <span class="token number">100</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, 1)</span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拖拉" tabindex="-1"><a class="header-anchor" href="#拖拉" aria-hidden="true">#</a> 拖拉</h3><p>参考编辑器(正在抓紧更新中...)</p><h3 id="缩放-1" tabindex="-1"><a class="header-anchor" href="#缩放-1" aria-hidden="true">#</a> 缩放</h3><p>参考编辑器(正在抓紧更新中...)</p><h3 id="添加-删除控件" tabindex="-1"><a class="header-anchor" href="#添加-删除控件" aria-hidden="true">#</a> 添加&amp;删除控件</h3><p><strong>添加控件逻辑</strong></p>`,37)),l(a,{id:"flowchart-260",code:"eJxLLM5MSbW1Ky5JLCqxUnjWt/zJ7m3PFvRzAQXSgeL5BalFiSWZ+XlAue5pz7o7n3ZseD5l99MdzVwgJSVAJcn5eSmZUCUQ7TPWP52w7Mne/c+nrOBKySxOTMpJ9c0vQzXt+bLGZ2sXAc182rWCKzEnJ78cQwlUkiszL7MEReJpx9yny7uf9kyD2MeVmJLinJ9bkJ+XmlfiWZKai2rK9t1PuxYgnA20IzUvBeiA3ZOfzZ3PxQUOAF1QAKRDqJJUiM80KlOLNXXt4G7TtQM5BCiAZpuuHUxDXj5QPZKHQTIAikmegQ==",preset:"prest"}),n[2]||(n[2]=s(`<p><strong>添加控件</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
    * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>DragEvent<span class="token punctuation">}</span></span> <span class="token parameter">e</span>
    */</span>
  <span class="token function">dropHandle</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> response <span class="token operator">=</span> e<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
    <span class="token doc-comment comment">/**
      * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Template<span class="token punctuation">.</span>BuiltinComponentItem<span class="token punctuation">}</span></span>
      */</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
    <span class="token keyword">const</span> component <span class="token operator">=</span> builtinComponent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">shapeLocation</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> e<span class="token punctuation">.</span>pageX<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> e<span class="token punctuation">.</span>pageY<span class="token punctuation">,</span> <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span>

    component<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">-</span> data<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>x
    component<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">-</span> data<span class="token punctuation">.</span>offset<span class="token punctuation">.</span>y
    component<span class="token punctuation">.</span>shapeId <span class="token operator">=</span> data<span class="token punctuation">.</span>id

    <span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateEvent</span><span class="token punctuation">(</span>templateChannel<span class="token punctuation">.</span>componentAdd<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">detail</span><span class="token operator">:</span> component<span class="token punctuation">,</span>
      <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;stage&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    eventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>templateChannel<span class="token punctuation">.</span>componentAdd<span class="token punctuation">,</span> event<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>drop事件触发后，创建控件，根据鼠标的位置初始化控件位置，然后把事件通过 <code>EventBus</code> 总线 <code>emit</code> 出去，上层编辑器监听去执行相应工作。所有编辑器的功能都是如此实现，具体请看厂库代码。</p><h2 id="tohtml" tabindex="-1"><a class="header-anchor" href="#tohtml" aria-hidden="true">#</a> toHTML</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
  * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Vue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
  */</span>
  <span class="token keyword">const</span> builtinGroupComponentRef <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinGroupComponentRef<span class="token punctuation">)</span>
  <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinGroupComponentRef
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinGroupComponentRef<span class="token punctuation">]</span>

  <span class="token doc-comment comment">/**
  * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Vue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
  */</span>
  <span class="token keyword">const</span> builtinComponentRef <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef<span class="token punctuation">)</span>
  <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef
  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef<span class="token punctuation">]</span>

  <span class="token doc-comment comment">/**
  * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>HTMLElement<span class="token punctuation">}</span></span>
  */</span>
  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> style <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span>

  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;relative&#39;</span>
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>border <span class="token operator">=</span> style<span class="token punctuation">.</span>border
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>boxShadow <span class="token operator">=</span> style<span class="token punctuation">.</span>boxShadow
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundImage <span class="token operator">=</span> style<span class="token punctuation">.</span>backgroundImage
  root<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundRepeat <span class="token operator">=</span> style<span class="token punctuation">.</span>backgroundRepeat

  builtinGroupComponentRef
    <span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>builtinComponentRef<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fragment<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>

  <span class="token keyword">return</span> root
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>画布的toHtml比控件的实现稍微复杂一点，那是肯定的，要处理各种情况，组情况和非组情况。</p><p>到这里就开始把画布上的所有控件全部生成为普通HTML原素，等待着编辑器最终生成可预览页面。</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>希望你能看懂为何要如此实现，这样你就能跟我一样强了。</p><figure><img src="https://static-1256180570.cos.ap-nanjing.myqcloud.com/image/1731835375.jpg" alt="51bfb58e31bacf81" tabindex="0" loading="lazy"><figcaption>51bfb58e31bacf81</figcaption></figure>`,10))])}const v=t(u,[["render",r],["__file","template_stage.html.vue"]]);export{v as default};
