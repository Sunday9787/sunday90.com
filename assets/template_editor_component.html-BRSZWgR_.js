import{_ as e,r as o,o as c,c as l,a as s,e as i,f as p,d as a,b as u}from"./app-DrKNV5QG.js";const r={},k={href:"https://v2.cn.vuejs.org/v2/api/#Vue-observable",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const t=o("ExternalLinkIcon");return c(),l("div",null,[n[3]||(n[3]=s("p",null,"组件在低代码项目中是极其重要的一环，基石中的基石！！！",-1)),i(" more "),n[4]||(n[4]=p(`<h2 id="需求分析" tabindex="-1"><a class="header-anchor" href="#需求分析" aria-hidden="true">#</a> 需求分析</h2><p>组件设计最主要分为两部分</p><ol><li><p>解耦</p></li><li><p>可扩展性</p></li></ol><p>所以 Props 的设计 需要，设计区分开公共 Props 和组件独有的 Props，方便解耦，因此设计了<code>property</code>Props 为了传递 组件的公共属性 和 独有属性，其余 Props 则是为了组件公共 Props</p><p>所以可以把公共 Props 抽象为 基类，所有控件开发继承这个基类</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h2><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>Vue2.7 可以使用 <code>mixin</code> 或者 <code>defineComponent</code> 的 <code>extends</code> 属性，参数是 一个 <code>ComponentOptionsMixin</code>来实现组件继承复用</p><p>Vue3 仅可以使用 <code>defineComponent</code> 如果是 setup 语法糖 则可以使用 <code>defineOptions</code> 的 <code>extends</code> 属性，参数同样是 <code>ComponentOptionsMixin</code></p><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h3><table><thead><tr><th>Props</th><th>Type</th><th>说明</th></tr></thead><tbody><tr><td><code>lock</code></td><td>Boolean</td><td>是否锁定</td></tr><tr><td><code>mode</code></td><td>&quot;shape&quot; | &quot;element&quot;</td><td>控件显示模式 shape 编辑模式 element 展示模式</td></tr><tr><td><code>label</code></td><td>String</td><td>控件名字</td></tr><tr><td><code>size</code></td><td>{w: Number, h: Number}</td><td>控制控件大小</td></tr><tr><td><code>property</code></td><td>Template.Property</td><td>控件属性(特殊属性&amp;公共属性)</td></tr><tr><td><code>position</code></td><td>{x: Number, y: Number}</td><td>控件位置</td></tr><tr><td><code>group</code></td><td>Boolean</td><td>标明组件是是组合组件</td></tr></tbody></table><h3 id="computed" tabindex="-1"><a class="header-anchor" href="#computed" aria-hidden="true">#</a> Computed</h3><table><thead><tr><th>Name</th><th>Type</th><th>说明</th></tr></thead><tbody><tr><td><code>formValue</code></td><td>any</td><td>value 的 setter &amp; getter 方便触发事件更新value值</td></tr><tr><td><code>id</code></td><td>String</td><td>方便展示 组件名称和id</td></tr><tr><td><code>isShape</code></td><td>Boolean</td><td>是否是 shape 编辑模式</td></tr><tr><td><code>isElement</code></td><td>Boolean</td><td>是否是 element 展示模式</td></tr><tr><td><code>style</code></td><td>Style</td><td>格式化 <code>property</code> 为内联样式</td></tr><tr><td><code>containerStyle</code></td><td>Style</td><td>最终展示在组件容器上的样式</td></tr><tr><td><code>valueStyle</code></td><td>Style</td><td>控件特殊属性 格式后的样式</td></tr></tbody></table><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> Method</h3><table><thead><tr><th>Name</th><th>Type</th><th>说明</th></tr></thead><tbody><tr><td><code>toHtml()</code></td><td>HTMLElement</td><td>在导出模板时需要格式化组件转为普通HTML</td></tr></tbody></table><h3 id="组件基类" tabindex="-1"><a class="header-anchor" href="#组件基类" aria-hidden="true">#</a> 组件基类</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> transformCase <span class="token keyword">from</span> <span class="token string">&#39;@/utils/case&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> formatComponentStyle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/views/template/utils&#39;</span>

<span class="token keyword">const</span> borderComponent <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;BuiltinInput&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;BuiltinSelect&#39;</span><span class="token punctuation">]</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">componentName</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">isInnerBorderComponent</span><span class="token punctuation">(</span><span class="token parameter">componentName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> borderComponent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>componentName<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Vue<span class="token punctuation">.</span>ComponentOptions<span class="token punctuation">&lt;</span>Vue<span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">const</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">lock</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;shape&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">group</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$vnode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">.</span>Ctor<span class="token punctuation">.</span>options<span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">formValue</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> transformCase<span class="token punctuation">.</span><span class="token function">kebabCase</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_uid
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">isShape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&#39;shape&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">isElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">===</span> <span class="token string">&#39;element&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">style</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">formatComponentStyle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">containerStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;vue/types/jsx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>CSSProperties<span class="token punctuation">}</span></span>
       */</span>
      <span class="token keyword">const</span> style <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">)</span>
      style<span class="token punctuation">.</span>columnGap <span class="token operator">=</span> <span class="token string">&#39;5px&#39;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInnerBorderComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">delete</span> style<span class="token punctuation">.</span>borderWidth
        <span class="token keyword">delete</span> style<span class="token punctuation">.</span>borderColor
        <span class="token keyword">delete</span> style<span class="token punctuation">.</span>borderStyle
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>group <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;absolute&#39;</span>
        style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
        style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
        style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>w <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
        style<span class="token punctuation">.</span>height <span class="token operator">=</span> style<span class="token punctuation">.</span>lineHeight <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> style
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">valueStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInnerBorderComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">borderWidth</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderWidth<span class="token punctuation">,</span>
          <span class="token literal-property property">borderBottomStyle</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderStyle<span class="token punctuation">,</span>
          <span class="token literal-property property">borderColor</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>borderColor
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>HTMLDivElement<span class="token punctuation">}</span></span>
       */</span>
      <span class="token keyword">const</span> el <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;absolute&#39;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>w <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>h <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>

      <span class="token keyword">return</span> el
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> mixin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组件-1" tabindex="-1"><a class="header-anchor" href="#组件-1" aria-hidden="true">#</a> 组件</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>// builtin-input.vue
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
div(v-if=&quot;isShape&quot; :style=&quot;containerStyle&quot;)
  label(:for=&quot;id&quot;) {{ label }}
  div(:id=&quot;id&quot; :style=&quot;valueStyle&quot; style=&quot;flex: 1&quot;)

div(v-else :style=&quot;containerStyle&quot;)
  label(:for=&quot;id&quot;) {{ label }}
  div.flex1(:style=&quot;valueStyle&quot; style=&quot;flex: 1&quot;) {{ formValue }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> mixin <span class="token keyword">from</span> <span class="token string">&#39;./mixins&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BuiltinInput&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个组件需要自己声明 value 属性，目的是为了 可以有正确的数据类型校验，组件的视图需要考虑到 在不同渲染模式下的样式</p><h2 id="控件" tabindex="-1"><a class="header-anchor" href="#控件" aria-hidden="true">#</a> 控件</h2><p>一个组件往往会被复用多次，区别也仅仅是 名称 和 绑定的key的区别</p><h3 id="控件数据模型" tabindex="-1"><a class="header-anchor" href="#控件数据模型" aria-hidden="true">#</a> 控件数据模型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">BuiltinComponentName</span> <span class="token operator">=</span> <span class="token string">&#39;builtin-group&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;builtin-input&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;builtin-select&#39;</span>

<span class="token keyword">interface</span> <span class="token class-name">BuiltinComponent</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/** 组件id */</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span>
  uid<span class="token operator">:</span> <span class="token builtin">number</span>
  shapeId<span class="token operator">:</span> <span class="token builtin">string</span>
  visible<span class="token operator">:</span> <span class="token builtin">boolean</span>
  builtin<span class="token operator">:</span> <span class="token builtin">boolean</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token doc-comment comment">/** 组件名称 */</span>
  name<span class="token operator">:</span> BuiltinComponentName
  props<span class="token operator">:</span> BuiltinComponentProps
  children<span class="token operator">?</span><span class="token operator">:</span> BuiltinComponent<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>组件的顶层数据模型，主要是跟组件标识符相关，或者是一些顶层变量</p><h3 id="初始化控件" tabindex="-1"><a class="header-anchor" href="#初始化控件" aria-hidden="true">#</a> 初始化控件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createBuiltinComponent</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">&#39;normal&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> name <span class="token operator">=</span> data<span class="token punctuation">.</span>name <span class="token operator">??</span> <span class="token string">&#39;builtin-input&#39;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Template<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> data<span class="token punctuation">.</span>id <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">uid</span><span class="token operator">:</span> data<span class="token punctuation">.</span>uid <span class="token operator">??</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">shapeId</span><span class="token operator">:</span> data<span class="token punctuation">.</span>shapeId<span class="token punctuation">,</span>
    name<span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> data<span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">visible</span><span class="token operator">:</span> data<span class="token punctuation">.</span>visible <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">builtin</span><span class="token operator">:</span> data<span class="token punctuation">.</span>builtin <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token function">initBuiltinComponentProps</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>props <span class="token operator">??</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> component
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>因为没有涉及到后端数据填充，所以只设计了 <code>name</code> 字段，key 字段未设计实现</em></p><p>分层架构</p><p>创建控件拆分为三部分</p><ol><li>初始化组件基础数据</li><li>初始化组件Props</li><li>初始化组件属性</li></ol><h3 id="props-数据模型" tabindex="-1"><a class="header-anchor" href="#props-数据模型" aria-hidden="true">#</a> Props 数据模型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BuiltinComponentProps</span> <span class="token punctuation">{</span>
  lock<span class="token operator">:</span> <span class="token builtin">boolean</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span>
  zIndex<span class="token operator">:</span> <span class="token builtin">number</span>
  required<span class="token operator">:</span> <span class="token builtin">boolean</span>
  property<span class="token operator">:</span> Property
  position<span class="token operator">:</span> <span class="token punctuation">{</span>
    x<span class="token operator">:</span> <span class="token builtin">number</span>
    y<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
  size<span class="token operator">:</span> <span class="token punctuation">{</span>
    w<span class="token operator">:</span> <span class="token builtin">number</span>
    h<span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span>
  option<span class="token operator">:</span> <span class="token punctuation">{</span>
    value<span class="token operator">:</span> BuiltinComponentPropsOptions<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token function">del</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>
	<span class="token punctuation">}</span>
  <span class="token keyword">get</span> <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BuiltinComponentPropsOptions<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化-控件-props" tabindex="-1"><a class="header-anchor" href="#初始化-控件-props" aria-hidden="true">#</a> 初始化 控件 props</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>BuiltinComponentProps<span class="token punctuation">}</span></span> <span class="token parameter">props</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Template<span class="token punctuation">.</span>BuiltinComponentName<span class="token punctuation">}</span></span> <span class="token parameter">name</span>
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token string">&#39;init&#39;</span><span class="token operator">|</span><span class="token string">&#39;document&#39;</span><span class="token operator">|</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">}</span></span> <span class="token parameter">type</span> \`init\` 初始化 \`document\` 模板数据 \`normal\` 普通初始化
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initBuiltinComponentProps</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> name<span class="token punctuation">,</span> type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Template<span class="token punctuation">.</span>BuiltinComponentProps<span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">zIndex</span><span class="token operator">:</span> props<span class="token punctuation">.</span>zIndex <span class="token operator">??</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">required</span><span class="token operator">:</span> props<span class="token punctuation">.</span>required <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">lock</span><span class="token operator">:</span> props<span class="token punctuation">.</span>lock <span class="token operator">??</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> props<span class="token punctuation">.</span>label <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> props<span class="token punctuation">.</span>value <span class="token operator">??</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">property</span><span class="token operator">:</span> <span class="token function">initBuiltinComponentProperty</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>property <span class="token operator">??</span> defaultProperty<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">position</span><span class="token operator">:</span> props<span class="token punctuation">.</span>position <span class="token operator">??</span> <span class="token function">usePosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">size</span><span class="token operator">:</span> props<span class="token punctuation">.</span>size <span class="token operator">??</span> <span class="token function">useSize</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">option</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">value</span><span class="token operator">:</span> Vue<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>options <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 当最后一项不为空时 才可以 新增项</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">key</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">del</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>option<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&#39;document&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">.</span>options<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">.</span>option<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为下拉列表想要实现自定义</p><p>所以option.value 值必须是一个响应式</p>`,37)),s("p",null,[n[1]||(n[1]=a("在这里使用 vue2 的 ")),s("a",k,[n[0]||(n[0]=a("observable")),u(t)]),n[2]||(n[2]=a(" 主要是考虑去掉.value尾巴 又可以获得响应式数据"))]),n[5]||(n[5]=p(`<h3 id="property-数据模型" tabindex="-1"><a class="header-anchor" href="#property-数据模型" aria-hidden="true">#</a> Property 数据模型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">TemplatePropertyValue</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>TemplateProperty<span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token operator">&gt;</span>

<span class="token keyword">class</span> <span class="token class-name">TemplateProperty</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>opt<span class="token operator">:</span> TemplateProperty<span class="token punctuation">)</span>
  <span class="token keyword">static</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> TemplateProperty<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token keyword">static</span> options<span class="token operator">:</span> TemplateProperty
  value<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span>
  unit<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  trueValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
  falseValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
  indeterminate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
  indeterminateTrueValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
  indeterminateFalseValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Property</span> <span class="token punctuation">{</span>
  display<span class="token operator">:</span> TemplatePropertyValue
  color<span class="token operator">:</span> TemplatePropertyValue
  fontFamily<span class="token operator">:</span> TemplatePropertyValue
  fontSize<span class="token operator">:</span> TemplatePropertyValue
  lineHeight<span class="token operator">:</span> TemplatePropertyValue
  borderWidth<span class="token operator">:</span> TemplatePropertyValue
  borderStyle<span class="token operator">:</span> TemplatePropertyValue
  borderColor<span class="token operator">:</span> TemplatePropertyValue
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> TemplatePropertyValue
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="property-初始化" tabindex="-1"><a class="header-anchor" href="#property-初始化" aria-hidden="true">#</a> Property 初始化</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>Property<span class="token punctuation">}</span></span> <span class="token parameter">property</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initBuiltinComponentProperty</span><span class="token punctuation">(</span><span class="token parameter">property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>Property<span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">get</span> <span class="token function">dashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>borderStyle<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">dashed</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>borderStyle<span class="token punctuation">.</span>value <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">get</span> <span class="token function">underline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>borderStyle<span class="token punctuation">.</span>indeterminate
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">set</span> <span class="token function">underline</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>borderStyle<span class="token punctuation">.</span>indeterminate <span class="token operator">=</span> val
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> item<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Property 就主要是对组件的样式调整，并设计了一个 <code>TemplatePropertyValue</code> 模型 主要是想统一 value 的类型 从而可以更好的转为 style 样式</p><h3 id="propsoption-数据模型" tabindex="-1"><a class="header-anchor" href="#propsoption-数据模型" aria-hidden="true">#</a> PropsOption 数据模型</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">BuiltinComponentPropsOptions</span> <span class="token punctuation">{</span>
  label<span class="token operator">:</span> <span class="token builtin">string</span>
  value<span class="token operator">:</span> <span class="token builtin">string</span>
  key<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控件组" tabindex="-1"><a class="header-anchor" href="#控件组" aria-hidden="true">#</a> 控件组</h2><p>这个组件是实现自由组合的核心功能之一</p><p>实现原理很简单，将组件的数据存入一个数组 <code>children</code> 中，从 children 里 找到 最小 left 和 最大 right 得到 x&amp;y，最小 top 和 最大 bottom 相减，取绝对值得到 h&amp;w</p><h3 id="公式" tabindex="-1"><a class="header-anchor" href="#公式" aria-hidden="true">#</a> 公式</h3><h4 id="position" tabindex="-1"><a class="header-anchor" href="#position" aria-hidden="true">#</a> Position</h4><p>x = Math.min.apply(null,所有组件的left)</p><p>y = Math.min.apply(null,所有组件的top)</p><h4 id="size" tabindex="-1"><a class="header-anchor" href="#size" aria-hidden="true">#</a> Size</h4><p><em>w 和 h 仅仅只需要找到差值即可 不需要关心正负值</em></p><p>w = Math.abs(Math.min.apply(null, 所有组件的left) - Math.max.apply(null, 所有组件的right))</p><p>h = Math.abs(Math.min.apply(null, 所有组件的top) - Math.max.apply(null, 所有组件的bottom))</p><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
.builtin-group(:style=&quot;groupStyle&quot;)
  component(
    ref=&quot;builtinComponentRef&quot;
    v-for=&quot;(component) in children&quot;
    v-bind=&quot;component.props&quot;
    v-model=&quot;component.value&quot;
    :mode=&quot;mode&quot;
    :children=&quot;component.children&quot;
    :key=&quot;component.id&quot;
    :is=&quot;component.name&quot;
    group)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> mixin <span class="token keyword">from</span> <span class="token string">&#39;./mixins&#39;</span>
<span class="token keyword">import</span> BuiltinInput <span class="token keyword">from</span> <span class="token string">&#39;./builtin-input.vue&#39;</span>
<span class="token keyword">import</span> BuiltinSelect <span class="token keyword">from</span> <span class="token string">&#39;./builtin-select.vue&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;BuiltinGroup&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    BuiltinInput<span class="token punctuation">,</span>
    BuiltinSelect
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Array<span class="token punctuation">,</span>
      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> rect <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token literal-property property">w</span><span class="token operator">:</span> props<span class="token punctuation">.</span>size<span class="token punctuation">.</span>w<span class="token punctuation">,</span>
      <span class="token literal-property property">h</span><span class="token operator">:</span> props<span class="token punctuation">.</span>size<span class="token punctuation">.</span>h
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span> rect <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">groupStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rect<span class="token punctuation">.</span>w <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rect<span class="token punctuation">.</span>h <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;reactive&#39;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;absolute&#39;</span>
        style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
        style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      <span class="token punctuation">}</span>

      <span class="token keyword">return</span> style
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Vue<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
       */</span>
      <span class="token keyword">const</span> builtinComponentRef <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef<span class="token punctuation">)</span>
        <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef
        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>builtinComponentRef<span class="token punctuation">]</span>

      <span class="token keyword">const</span> group <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      group<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;absolute&#39;</span>
      group<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>
      group<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>

      builtinComponentRef<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        group<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toHtml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>

      <span class="token keyword">return</span> group
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="重写-tohtml" tabindex="-1"><a class="header-anchor" href="#重写-tohtml" aria-hidden="true">#</a> 重写 toHtml</h4><p>因为组内的是vue 组件，跟普通的组件不一样，所以需要拿到组件 Ref 再调用 vue实例的 toHTML 方法</p><h3 id="初始化组" tabindex="-1"><a class="header-anchor" href="#初始化组" aria-hidden="true">#</a> 初始化组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>TemplateDocument<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">,</span> TemplateDocument<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TemplateDocument<span class="token punctuation">.</span>CreateBuiltinComponentType<span class="token punctuation">]</span><span class="token operator">|</span>
 <span class="token operator">*</span> <span class="token punctuation">[</span>TemplateDocument<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> TemplateDocument<span class="token punctuation">.</span>CreateBuiltinComponentType<span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">args</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createBuiltinComponentGroup</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>CreateBuiltinComponentType<span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">let</span> type <span class="token operator">=</span> <span class="token string">&#39;normal&#39;</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token keyword">null</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>TemplateDocument<span class="token punctuation">.</span>BuiltinComponent<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    type <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    children <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    group <span class="token operator">=</span> <span class="token function">createBuiltinComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;builtin-group&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    type <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    children <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    group <span class="token operator">=</span> <span class="token function">createBuiltinComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;builtin-group&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">[</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>
   */</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span> <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>getRect<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">previousValue<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
       * <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span>Array<span class="token punctuation">&lt;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&gt;</span><span class="token punctuation">}</span></span>
       */</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span> <span class="token operator">=</span> previousValue

      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">.</span>left<span class="token punctuation">)</span>
      top<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">.</span>top<span class="token punctuation">)</span>
      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">.</span>right<span class="token punctuation">)</span>
      bottom<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">.</span>bottom<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span>

  group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span>
  group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span>
  group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>size<span class="token punctuation">.</span>w <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span>
  group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>size<span class="token punctuation">.</span>h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> top<span class="token punctuation">)</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> bottom<span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">!==</span> <span class="token string">&#39;document&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x <span class="token operator">-=</span> group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x
      item<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">-=</span> group<span class="token punctuation">.</span>props<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  group<span class="token punctuation">.</span>children <span class="token operator">=</span> children

  <span class="token keyword">return</span> group
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过计算组内的组件来计算组控件的位置和尺寸</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h2><p>希望通过我的见解能给你带来一点点的小启发</p><figure><img src="https://static-1256180570.cos.ap-nanjing.myqcloud.com/image/1731370838.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,28))])}const b=e(r,[["render",d],["__file","template_editor_component.html.vue"]]);export{b as default};
