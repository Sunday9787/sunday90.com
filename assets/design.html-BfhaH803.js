import{_ as o,r as c,o as l,c as i,a as s,e as u,d as a,b as p,f as e}from"./app-DNjtbtn-.js";const r={},k={href:"https://juejin.cn/post/7259562014417813564?searchId=202405211746025DD37F5F491A5FF13ED1#heading-5",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/typestack/class-transformer",target:"_blank",rel:"noopener noreferrer"};function v(m,n){const t=c("ExternalLinkIcon");return l(),i("div",null,[n[5]||(n[5]=s("p",null,"写了那么多年TS总结一下vue3 + ts 最佳实践，我愿称之为：终极蛇皮上帝视角之TS的终极奥义之女朋友喊我回家吃饭之我6点准时下班！好的下面我们开始进入正文",-1)),u(" more "),n[6]||(n[6]=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1)),n[7]||(n[7]=s("p",null,"你是否有这样的顾虑，项目想上ts但是又怕写声明，还有各种数据结构转换，尤其是提交数据给后端尤其费劲，那~ 我是这样写ts的",-1)),s("p",null,[n[1]||(n[1]=a("这篇文章是受到 这篇文章启发而来 ")),s("a",k,[n[0]||(n[0]=a("也许跟大家不太一样,我是这么用TypeScript来写前端的")),p(t)]),n[2]||(n[2]=a("不同的是我只有实战没有花活没有高科技名词"))]),n[8]||(n[8]=e(`<p>我早在18年下半年就开始使用Vue2 + TS 了，但那时候 写接口返回的声明真的是累死了，后面 vscode 有个 <code>JSON TO TS</code> 的插件可以一键把json 转为类型声明，帮我减轻了不少工作量。（听说还有后端可以直接生成d.ts的操作，但是我那个时候不知道👀）</p><p>TS 写下来觉得没有它不能活，代码就是文档，代码就是api，也不需要总是去翻API文档了 <code>.</code>一下所有东西都出来了，也不需要担心单词拼写错误，完全百分百杜绝这类低级错误。（关于要不要上TS这个话题太多了，你觉得好就上不好就不上，就这么简单，懂的人自然懂。。。）</p><p>不过现在想想，当时上 TS 有点虎，当时我学TS花了一周左右，就直接上了👀😅</p><h2 id="传统的前端ts操作" tabindex="-1"><a class="header-anchor" href="#传统的前端ts操作" aria-hidden="true">#</a> 传统的前端TS操作</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// api/user.ts</span>
<span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  nickname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  avatar<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">UserUpdate</span><span class="token punctuation">(</span>data<span class="token operator">:</span> User<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&#39;/user/update&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// views/user/index.vue</span>
<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果数据需要一次性更新 那么 使用 ref 否则使用 reactive</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      nickname<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      avatar<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      user
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看着好像是没啥问题，确实没啥问题🤪但是不觉得繁琐吗？</p><p>我需要先写声明，接着 需要去声明变量，真的没必要。。。</p><h2 id="我的操作" tabindex="-1"><a class="header-anchor" href="#我的操作" aria-hidden="true">#</a> 我的操作</h2><h3 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> Class</h3><p>是否忘记了 ts 中 class 也是类型，那么我 直接定义 class</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// api/user.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>别忘了tsconfig内关闭 <code>strictPropertyInitialization</code> 这样就不需要再写 <code>!</code>非空操作符了(主要还是麻烦 不好看)</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  ...<span class="token punctuation">,</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>strictPropertyInitialization</code>是控制 是否严格初始化变量，默认是true</p><p>有人会问 为什么不初始化 属性呢？</p><p>其实 如果没有必要的话 不需要初始化（id 这种可以初始化一个值），完全是多此一举，首先 组件 会有空判断，其次 接口同样会返回这样的数据结构，如果后端不确定这个字段是否返回那么我们相应的加一个<code>?</code>可选声明即可</p><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> Model</h3><p>那么还有一个问题，上面是 后端返回的数据模型，其实 后端返回的数据结构 通常前端不能直接使用，根据业务复杂度不同，前端也有自己的数据模型，根据后端返回的数据来初始化数据模型，提交时 再转换成后端需要的数据模型，转换操作 可能每一个业务都需要 来一遍，js的话还好 ts 则 非常痛苦很繁琐</p><h3 id="class-transformer" tabindex="-1"><a class="header-anchor" href="#class-transformer" aria-hidden="true">#</a> Class-transformer</h3><p>这玩意儿真是相见恨晚，如果我能早点用，也就不用怎么加班了🥲数据转换真的很繁琐</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> email<span class="token operator">:</span> <span class="token builtin">string</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
  show <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Expose</code> 装饰器配合</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> email<span class="token operator">:</span> <span class="token builtin">string</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
  updateAt<span class="token operator">:</span> <span class="token builtin">string</span>
  show <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token comment">// views/user/index.vue</span>
<span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 更新&amp;新增</span>
    <span class="token keyword">const</span> <span class="token function-variable function">save</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> user<span class="token punctuation">.</span>id <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;更新成功&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;创建成功&#39;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">instanceToPlain</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span> strategy<span class="token operator">:</span> <span class="token string">&#39;excludeAll&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">await</span> <span class="token function">UserUpdate</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
			Notify<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      user<span class="token punctuation">,</span>
      save
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>class-transformer</code> 过滤字段有几种策略</p><ol><li><code>excludeAll</code> - 过滤掉未加 <code>@Expose</code> 装饰器的字段</li><li><code>exposeAll</code> - 过滤掉加了 <code>@Exclude</code> 装饰器的字段</li></ol><p>过滤后提交的数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> email<span class="token operator">:</span> <span class="token builtin">string</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
  updateAt<span class="token operator">:</span> <span class="token builtin">string</span>
  show <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>

<span class="token function">instanceToPlain</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span> strategy<span class="token operator">:</span> <span class="token string">&#39;excludeAll&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// output</span>
<span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>class-transformer</code> 不仅可以过滤字段 还可以 格式化数据</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> email<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Transform</span></span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  createAt<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Transform</span></span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  updateAt<span class="token operator">:</span> <span class="token builtin">string</span>
  show <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 在渲染时就不需要在 模板上或者render再处理了，而且更优雅</p>`,30)),s("p",null,[n[4]||(n[4]=a("详细功能可参考 ")),s("a",d,[n[3]||(n[3]=a("文档")),p(t)])]),n[9]||(n[9]=e(`<h3 id="abstract-oop" tabindex="-1"><a class="header-anchor" href="#abstract-oop" aria-hidden="true">#</a> Abstract&amp;OOP</h3><p>我们其实可以把很多事物都可以抽象为类，以面向对象的形式去设计&amp;管理</p><h4 id="服务类-service" tabindex="-1"><a class="header-anchor" href="#服务类-service" aria-hidden="true">#</a> 服务类：Service</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> AppRequest <span class="token punctuation">{</span>
  <span class="token keyword">interface</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>
    current<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
    size<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// abstractService.ts</span>
<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractService</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义一个抽象属性 让子类们实现</span>
  <span class="token keyword">abstract</span> baseUrl<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">// 还可以再定义一些通用方法 让子类实现</span>

  <span class="token comment">// 添加&amp;更新</span>
  <span class="token comment">// abstract save?(): Promise&lt;void&gt;</span>
  <span class="token comment">// 删除</span>
  <span class="token comment">// abstract del?(): Promise&lt;void&gt;</span>
  <span class="token comment">// 获取多个数据或者单个数据</span>
  <span class="token comment">// abstract data()?: Promise&lt;unknown&gt;</span>
  <span class="token comment">// 获取分页数据</span>
  <span class="token comment">// abstract select?(query: AppRequest.List): Promise&lt;unknown&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实体类-entity" tabindex="-1"><a class="header-anchor" href="#实体类-entity" aria-hidden="true">#</a> 实体类：Entity</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// abstractEntity.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> instanceToPlain<span class="token punctuation">,</span> Transform <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-transformer&#39;</span>

<span class="token keyword">type</span> <span class="token class-name">ObjectKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">type</span> <span class="token class-name">AbstractEntityMethodKey</span> <span class="token operator">=</span> ObjectKey<span class="token operator">&lt;</span>AbstractEntity<span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">EntityMethodKey</span> <span class="token operator">=</span> ObjectKey<span class="token operator">&lt;</span>AbstractEntityMethod<span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">ExcludeEntityAttribute</span> <span class="token operator">=</span> EntityMethodKey <span class="token operator">|</span> AbstractEntityMethodKey
<span class="token comment">// 主要是为了根据实体提取后端返回的数据结构，排除前端实体额外定义的属性&amp;方法</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">EntityJSON<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> ExcludeEntityAttribute<span class="token operator">&gt;</span>

<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractEntity</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">toJSON</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">instanceToPlain</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span> strategy<span class="token operator">:</span> <span class="token string">&#39;excludeAll&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> EntityJSON<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> AbstractEntity<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再丰富一点</p><p>例如如果表字段都存在 createAt updateAt 这种统一的字段则可以</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// abstractEntity.ts</span>
<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractEntity</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generic-function"><span class="token function">toJSON</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> object<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>context<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">instanceToPlain</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">{</span> strategy<span class="token operator">:</span> <span class="token string">&#39;excludeAll&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> EntityJSON<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Transform</span></span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">readonly</span> createAt<span class="token operator">:</span> Date

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Transform</span></span><span class="token punctuation">(</span>value <span class="token operator">=&gt;</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token keyword">readonly</span> updateAt<span class="token operator">:</span> Date

  <span class="token keyword">public</span> <span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> AbstractEntity<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子类实现" tabindex="-1"><a class="header-anchor" href="#子类实现" aria-hidden="true">#</a> 子类实现</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// user.service.ts</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractService</span> <span class="token punctuation">{</span>
  baseURL <span class="token operator">=</span> <span class="token string">&#39;/user&#39;</span>

  <span class="token function">data</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseURL <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/data</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">del</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseURL <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/del/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">save</span><span class="token punctuation">(</span>data<span class="token operator">:</span> UserEntityJSON<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> request<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseURL <span class="token operator">+</span> <span class="token string">&#39;/save&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// user.entity.ts</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UserEntityJSON</span> <span class="token operator">=</span> EntityJSON<span class="token operator">&lt;</span>UserEntity<span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEntity</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">static</span> statusMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>UserEntity<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> type<span class="token operator">:</span> Utils<span class="token punctuation">.</span>StatusType <span class="token punctuation">}</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;未初始化&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;warning&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;未认证&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;info&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> text<span class="token operator">:</span> <span class="token string">&#39;已认证&#39;</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token string">&#39;success&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> id <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> nickname<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> avatar<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Expose</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> email<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token comment">/* 0未初始化 1未实名 2已实名 */</span>
  status<span class="token operator">:</span> <span class="token number">0</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span>
  <span class="token keyword">get</span> <span class="token function">statusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> UserEntity<span class="token punctuation">.</span>statusMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">.</span>text
  <span class="token punctuation">}</span>
  <span class="token comment">// 是否已实名</span>
  <span class="token keyword">get</span> <span class="token function">isCertified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">2</span>
  <span class="token punctuation">}</span>

  <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> UserEntity<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> UserEntity<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在这里我并没有依照上面引用的文章把 <strong>service</strong> 声明在实体内，主要是我觉得服务这类初始化一次即可，当然这个看你自己，声明在实体内 直接 <code>this.service.save(this.toJSON())</code> 也可</p></blockquote><h4 id="view-视图调用" tabindex="-1"><a class="header-anchor" href="#view-视图调用" aria-hidden="true">#</a> View 视图调用</h4><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  el-input(v-model=&quot;user.nickname&quot;)
  el-button(@click=&quot;onUserSave()&quot;) 创建用户
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">shallowRef</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">onUserSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> user<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取数据调用</p><p>我们可以写成一个hooks</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// global.d.ts</span>
<span class="token keyword">declare</span> <span class="token keyword">namespace</span> Utils <span class="token punctuation">{</span>
  <span class="token keyword">type</span> <span class="token class-name">ActionType</span> <span class="token operator">=</span> <span class="token string">&#39;edit&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;add&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;detail&#39;</span>

  <span class="token keyword">interface</span> <span class="token class-name">ActionProps</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token builtin">number</span>
    type<span class="token operator">:</span> ActionType
  <span class="token punctuation">}</span>

  <span class="token keyword">type</span> <span class="token class-name">StatusType</span> <span class="token operator">=</span> <span class="token string">&#39;default&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;error&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;primary&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;info&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;success&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;warning&#39;</span>
<span class="token punctuation">}</span>

<span class="token comment">// views/user/hooks/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Utils<span class="token punctuation">.</span>ActionProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>

  user<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    user<span class="token punctuation">.</span>value <span class="token operator">=</span> data
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> user
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OOP和FP的完美结合😃</p><p>我们再加一个loading状态</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// hooks/useLoading.ts</span>
<span class="token keyword">type</span> <span class="token class-name">UseActionRequest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token keyword">type</span> <span class="token class-name">UseActionHandle</span> <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token operator">:</span> UseActionRequest<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>
<span class="token keyword">type</span> <span class="token class-name">UseActionCallback</span> <span class="token operator">=</span> <span class="token punctuation">(</span>handle<span class="token operator">:</span> UseActionHandle<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span>cb<span class="token operator">:</span> UseActionCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>refresh <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>
          <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          refresh <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">400</span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> init <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// views/user/hooks/index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span>props<span class="token operator">:</span> Utils<span class="token punctuation">.</span>ActionProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token keyword">const</span> <span class="token punctuation">{</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;add&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        user<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">await</span> user<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>视图</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  app-view
    app-loading(v-if=&quot;loading&quot;)
    app-card(v-else)
      el-col
        label 用户名
        span {{ user.nickname }}
      el-col
        label 头像
        span {{ user.avatar }}
      el-col
        label 邮箱
        span {{ user.email }}
      el-col
        label 状态
        span {{ user.statusText }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;../hooks&#39;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> user<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>对比以上发现，oop的方式去组织api 请求 和 数据结构等等，能够更好的内聚业务，合理的分层更能体现出单一职责的设计原则，这对于项目是否变成一座屎山来讲至关重要。</p><p>前端现在人人都在讲 FP、FP、FP 其实FP有FP擅长的地方，OOP有OOP擅长的地方，两种模式没有绝对的好也没有绝对的坏，为何不把两种设计模式结合使用，让擅长做的，去做擅长的，岂不是写大欢喜</p><p><strong>强调</strong></p><p>面向对象的设计模式对于不论是什么项目来讲都是非常重要的，工程化、结构化、高度抽象化，可以更好的维护我们的项目，组织代码逻辑</p><p>如果本文有帮助到你 还请不要吝啬你的小手手点个小心心</p><figure><img src="https://static-1256180570.cos.ap-nanjing.myqcloud.com/image/202410091825137-1728469523.png" alt="比心心" tabindex="0" loading="lazy"><figcaption>比心心</figcaption></figure>`,29))])}const g=o(r,[["render",v],["__file","design.html.vue"]]);export{g as default};
