import{_ as c,r as p,o as i,c as u,a as s,e as r,d as a,b as t,w as k,f as o}from"./app-DrKNV5QG.js";const d={},v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",target:"_blank",rel:"noopener noreferrer"},m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol#%E5%85%A8%E5%B1%80%E5%85%B1%E4%BA%AB%E7%9A%84_symbol",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol#%E5%85%A8%E5%B1%80%E5%85%B1%E4%BA%AB%E7%9A%84_symbol",target:"_blank",rel:"noopener noreferrer"},f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map",target:"_blank",rel:"noopener noreferrer"};function y(w,n){const l=p("RouterLink"),e=p("ExternalLinkIcon");return i(),u("div",null,[n[29]||(n[29]=s("p",null,"数据重置，你肯定不陌生，这有啥可讲的，不就是 复制一份 再重新更新上去，哎哎~ 今天讲的可不是让你手动复制一份手动更新",-1)),r(" more "),n[30]||(n[30]=s("h2",{id:"前言",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),a(" 前言")],-1)),n[31]||(n[31]=s("p",null,"相信大家都有遇到这样的一个需求，例如 form 表单，点击编辑只要没有保存，取消时 数据应该还原为之前的数据",-1)),n[32]||(n[32]=s("p",null,"在此之前你可能会先 clone一个数据副本，取消再重新赋值上去，嗯~ 没问题 确实可以",-1)),n[33]||(n[33]=s("p",null,"但是即便是你把它封装成一个方法，到最后不还是得 import 来 import 过去，还要再 调用。好像有点麻烦的样子👀",-1)),s("p",null,[n[1]||(n[1]=a("本文适合结合上一篇文章 ")),t(l,{to:"/log/typescript/design.html"},{default:k(()=>n[0]||(n[0]=[a("我是这样写TS的")])),_:1}),n[2]||(n[2]=a(" 来阅读"))]),n[34]||(n[34]=o(`<h2 id="传统" tabindex="-1"><a class="header-anchor" href="#传统" aria-hidden="true">#</a> 传统</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> deepClone <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;lodash&quot;</span>

<span class="token comment">// 假设 数据是从 后端获取</span>
<span class="token comment">// useUser.ts</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;至尊宝&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>
    lover<span class="token operator">:</span> <span class="token string">&quot;紫霞仙子&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// user.vue</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  name<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  lover<span class="token operator">:</span> <span class="token string">&quot;&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 获取用户</span>
<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// copy</span>
<span class="token keyword">const</span> originData <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>value <span class="token operator">=</span> data

<span class="token comment">// 重置</span>
<span class="token keyword">function</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>value <span class="token operator">=</span> originData
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确实是没问题，继续看不一样的</p><h2 id="不一样的" tabindex="-1"><a class="header-anchor" href="#不一样的" aria-hidden="true">#</a> 不一样的</h2><h3 id="抽象类-abstractentity" tabindex="-1"><a class="header-anchor" href="#抽象类-abstractentity" aria-hidden="true">#</a> 抽象类 AbstractEntity</h3><p>在抽象类上添加 reset 方法</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// abstractEntity.ts</span>
<span class="token keyword">const</span> valueWeakMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap<span class="token operator">&lt;</span>AbstractEntity<span class="token punctuation">,</span> EntityJSON<span class="token operator">&lt;</span>AbstractEntity<span class="token operator">&gt;&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractEntity</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意这里</span>
		<span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span>
    window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      valueWeakMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> self<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意这里</span>
    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">toRaw</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> valueWeakMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token operator">!</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里可以思考一下 为什么 要 setTimeout 延时 和 reset 方法内 为何要 toRaw</p></blockquote><h3 id="实体" tabindex="-1"><a class="header-anchor" href="#实体" aria-hidden="true">#</a> 实体</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// user.entity.ts</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UserEntity</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEntity</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span>
  lover<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="视图" tabindex="-1"><a class="header-anchor" href="#视图" aria-hidden="true">#</a> 视图</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// hooks.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> plainToInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;class-transformer&#39;</span>

<span class="token comment">// 假设已获取到后端数据</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">&quot;至尊宝&quot;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span> lover<span class="token operator">:</span> <span class="token string">&quot;紫霞仙子&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	data<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token function">plainToInstance</span><span class="token punctuation">(</span>UserEntity<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.name<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.age<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">&gt;</span></span>喜欢<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-model:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.lover<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.reset()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> <span class="token punctuation">{</span> useUser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./hooks&#39;</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么样看起来不错吧，很简洁 清晰</p><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><h3 id="weakmap-是什么" tabindex="-1"><a class="header-anchor" href="#weakmap-是什么" aria-hidden="true">#</a> WeakMap 是什么？</h3><p><code>WeakMap</code>这个大家应该很少见，确实 我也少见这个，ES6看了不少，但是这个确实没怎么研究过</p><p>先看看MDN怎么解释</p>`,18)),s("blockquote",null,[s("p",null,[s("a",v,[n[3]||(n[3]=a("WeakMap")),t(e)]),n[7]||(n[7]=a("是一种")),n[8]||(n[8]=s("strong",null,"键值对",-1)),n[9]||(n[9]=a("的集合，其中的键必须是对象或")),s("a",m,[n[4]||(n[4]=a("非全局注册的符号")),t(e)]),n[10]||(n[10]=a("，且值可以是任意的 ")),s("a",b,[n[5]||(n[5]=a("JavaScript 类型")),t(e)]),n[11]||(n[11]=a("，并且不会创建对它的键的强引用。换句话说，一个对象作为 ")),n[12]||(n[12]=s("code",null,"WeakMap",-1)),n[13]||(n[13]=a(" 的键存在，不会阻止该对象被垃圾回收。一旦一个对象作为键被回收，那么在 ")),n[14]||(n[14]=s("code",null,"WeakMap",-1)),n[15]||(n[15]=a(" 中相应的值便成为了进行垃圾回收的候选对象，只要它们没有其他的引用存在。唯一可以作为 ")),n[16]||(n[16]=s("code",null,"WeakMap",-1)),n[17]||(n[17]=a(" 的键的原始类型是")),s("a",g,[n[6]||(n[6]=a("非全局注册的符号")),t(e)]),n[18]||(n[18]=a("，因为非全局注册的符号是保证唯一的，并且不能被重新创建。"))]),s("p",null,[n[20]||(n[20]=s("code",null,"WeakMap",-1)),n[21]||(n[21]=a(" 允许将数据与对象相关联，而不阻止键对象被垃圾回收，即使值引用了键。然而，")),n[22]||(n[22]=s("code",null,"WeakMap",-1)),n[23]||(n[23]=a(" 并不允许观察其键的生命周期，这就是为什么它不允许枚举；如果 ")),n[24]||(n[24]=s("code",null,"WeakMap",-1)),n[25]||(n[25]=a(" 提供了任何获得其键的列表的方法，那么这些列表将会依赖于垃圾回收的状态，这引入了不确定性。如果你想要可以获取键的列表，你应该使用 ")),s("a",f,[n[19]||(n[19]=s("code",null,"Map",-1)),t(e)]),n[26]||(n[26]=a(" 而不是 ")),n[27]||(n[27]=s("code",null,"WeakMap",-1)),n[28]||(n[28]=a("。"))])]),n[35]||(n[35]=o('<p>说白了WeakMap 的 key 如果是对象，且这个对象被回收后 那么 所对应的 value 也就被 回收了，那么我们就可以利用这个特性去做数据缓存的操作 嘿嘿嘿🤓</p><p>我们都知道 ref 的变量 在 vue 组件销毁时 会自动的也会去销毁变量那么</p><p>当 获取后端数据 初始化 class 时 则可以 把原始数据缓存起来，重置的时候 拿出来更新掉，ref 销毁时，则 自动解除了引用 WeakMap 则自动回收 value 值</p><h3 id="为什么在-constructor-里要-settimeout" tabindex="-1"><a class="header-anchor" href="#为什么在-constructor-里要-settimeout" aria-hidden="true">#</a> 为什么在 constructor 里要 setTimeout？</h3><p>其实这是跟 微任务/宏任务 有关系的</p><p>new 的时候只是会初始化一个普通类而已。如果是初始化数据则（<strong>注意此时数据并没有被填充</strong>），此时 this 是一个 未被填充数据的空对象 所以需要 setTimeout 或者 Promise.then 做异步操作，否则<code>self.toJSON()</code>返回的是空对象</p><h3 id="为什么在-reset-方法内-需要-toraw-this" tabindex="-1"><a class="header-anchor" href="#为什么在-reset-方法内-需要-toraw-this" aria-hidden="true">#</a> 为什么在 reset 方法内 需要 <code>toRaw(this)</code>？</h3><p>因为此时 this 是一个被 vue 代理的 对象，所以 原来的 this 内存地址 跟 当前 this 内存地址不一致 所以 <code>valueWeakMap.get(this)</code>获取到的 是 undefined</p><p>在 constructor 里 WeakMap 存的 this 是 未被代理的原生对象，因为那个时候 plainToInstance 还在初始化 class</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="https://static-1256180570.cos.ap-nanjing.myqcloud.com/image/这身怎样-1729935995.jpg?imageMogr2/interlace/1/quality/100/thumbnail/300x" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Class 优雅永不过时</p>',12))])}const q=c(d,[["render",y],["__file","reset_data.html.vue"]]);export{q as default};
